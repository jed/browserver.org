{
  "name": "brow-client",
  "version": "0.0.2",
  "description": "෴ A node.js HTTP server in your browser ෴",
  "main": "browserver.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/jed/browserver-client.git"
  },
  "author": {
    "name": "Jed Schmidt"
  },
  "license": "BSD",
  "readme": "෴ browserver-client ෴\n========================\n\nThis is a [browserver](http://browserver.org) client, for the browser.\n\nbrowserver-client exposes the important bits of the [node.js](http://nodejs.org) [http API](http://nodejs.org/docs/latest/api/all.html#all_http) in the browser, allowing it to receive incoming HTTP requests and make outgoing HTTP requests via WebSockets.\n\nThis library, along with [browserver-node](https://github.com/jed/browserver-node), is all the code you need to set up your own browserver.\n\nExample\n-------\n\nIn `index.html`:\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <title>My Browserver App</title>\n    <script src=\"/path/to/websocket-shim\"></script>\n    <script src=\"/path/to/browserver\"></script>\n    <script src=\"/app.js\"></script>\n  </head>\n</html>\n```\n\nIn `app.js`:\n\n```javascript\n// to handle incoming HTTP requests,\n// use the standard node.js http.Server API\nvar server = http.createServer(function(req, res) {\n  if (req.method != \"GET\") {\n    res.writeHead(405, {\"Content-Type\": \"text/plain\"})\n    return res.end(\"Method not allowed\")\n  }\n\n  var pathname = req.url.split(\"?\")[0]\n\n  if (pathname != \"/hello\") {\n    res.writeHead(404, {\"Content-Type\": \"text/plain\"})\n    return res.end(\"Not found.\")\n  }\n\n  res.writeHead(200, {\"Content-Type\": \"text/plain\"})\n  res.end(\"Hello, world!\")\n})\n\n// establish a WebSocket (or compatible) connection,\n// in this case using engine.io\nvar ws = new eio.Socket({host: \"myserver.com\"})\n\n// bind the browserver HTTP server to the WebSocket\n// and wait for connections from the browserver proxy!\nserver.listen(ws)\n\n// to make outgoing HTTP requests w/o cross-domain issues,\n// use http.get or http.request\nhttp.get(\"http://www.google.com/index.html\", function(res) {\n  console.log(\"Google answered back!\")\n})\n```\n\nAPI\n---\n\nThe browserver-client API is basically a port of the node.js [http API](http://nodejs.org/docs/latest/api/all.html#all_http), with a few caveats:\n\n- Streaming is not supported. This means a `ServerRequest` or `ClientResponse` will only emit one `data` event, and that multiple calls to the `write` method of a `ServerResponse` or `ClientRequest` will be buffered locally and sent when `end` is called. The `data` events are provided for compatibility, but aren't technically needed, since the body itself is stored on the `body` property of the `ServerRequest` or `ClientResponse`.\n\n- The aspects of the node.js implementation that don't map well to the browser (such as `writeContinue` and `addTrailers` methods, and client agents) have been omitted.\n\nOtherwise, if there is a method or behavior that differs from what you'd expect on node.js, please [file an issue](https://github.com/jed/browser-client/issues).\n\nTODO\n----\n\n- Include more client tests in the phantomjs tests run for [browserver-node](https://github.com/jed/browserver-node)\n- Make an exhaustive list of the HTTP APIs supported and not supported.\n- Consider enabling support for `addEventListener` events.\n",
  "_id": "brow-client@0.0.2",
  "dist": {
    "shasum": "a9360551a231602216c0f01286c1565525aff477"
  },
  "_from": "brow-client@0.0.2"
}
